<?php
    use ObjectivePHP\Application\View\Helper\Vars;
    use ObjectivePHP\Application\Workflow\WorkflowInterface;
    use ObjectivePHP\Html\Tag\Tag;

    $event = Vars::get('event');
    $callbacks = Vars::get('callbacks');

    Tag::a('Back to workflow overview', "/demo/events/workflow")->br()->br();

    Tag::div()->addClass("panel", "panel-default");
    Tag::div("Event details", "panel-heading");


    // no callbacks
    if(!$callbacks)
    {

        Tag::div(Tag::p("There is no callback attached to the <code>$event</code> event."), "panel-body");

    }
    else
    {
        Tag::div(Tag::p("Find here all callbacks attached to the <code>$event</code> event."), "panel-body");


        Tag::table()->addClass("table", "table-striped");
            Tag::thead();
                Tag::tr();
                    Tag::th('Event bound');
                    Tag::th('Alias');
                    Tag::th('Type');
                    Tag::th('Callback');
                Tag::tr()->close();
            Tag::thead()->close();
            Tag::tbody();

            foreach ($callbacks as $callback)
            {
                Tag::tr();
                Tag::td($callback['event']);
                Tag::td($callback['alias']);
                Tag::td(Tag::strong(ucwords($callback['type'])));
                Tag::td(display_callback($callback['type'], $callback['callback']));
                Tag::tr()->close();
            }

        Tag::tbody()->close();
        Tag::table()->close();

    }

    Tag::div()->close();

function display_callback($type, $callback)
{
    switch($type)
    {

        case 'invokable class':
            return sprintf(Tag::code('%s'), $callback);
        break;

        case 'invokable object':
            return sprintf(Tag::code('%s::__invoke()'), get_class($callback));
        break;

        case 'action':
            return sprintf(Tag::code('%s::run()'), get_class($callback));
        break;

        case 'method':
            return sprintf(Tag::code('%s::%s()'), get_class($callback[0]), $callback[1]);

        case 'closure':
            /* @var $callback Closure */
            $info = new ReflectionFunction($callback);

            $filename = ltrim(str_replace(getcwd(), '', $info->getFileName()), '/');
            $startLine = $info->getStartLine();

            return sprintf('Closure defined in ' . Tag::code('%s:%d'), $filename, $startLine);
        break;

        default:
            return $callback;

    }
}

